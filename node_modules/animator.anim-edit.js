var Button = require("wdg.button");
var Widget = require("wdg");
var Util = require("animator.util");

var Path = require("path");
var FS = require("fs");

var W = 120;
var H = 120;

/**
 * @example
 * var AnimEdit = require("animator.anim-edit");
 * var instance = new AnimEdit();
 * @class AnimEdit
 */
var AnimEdit = function(filename) {
    Widget.call(this, {tag: "div"});
    this.addClass("animator-anim-edit");
    this._filename = filename;
    this._directory = Path.dirname(filename);
    this.refresh();
};

AnimEdit.prototype = Object.create(Widget.prototype);
AnimEdit.prototype.constructor = AnimEdit;

/**
 * @return void
 */
AnimEdit.prototype.refresh = function() {
    var that = this;
    this.clear();
    this._frameIndex = -1;
    this._fixedFrameIndex = -1;
    this._fixedImage = null;
    var left = Widget.div().addClass("left");
    var right = Widget.div().addClass("right");
    var canvas = Widget.div("canvas");
    canvas.attr({width: W, height: H, title: this._directory});
    left.append(canvas);
    this.append(left, right);

    this._ctx = canvas.element().getContext("2d");
    this.drawBackground();

    var data = JSON.parse(FS.readFileSync(this._filename));
    console.info("[animator.anim-edit] data=...", data);

    var div = Widget.div().append(Widget.div().text("Durée (ms) :"));
    var inpTime = Widget.div("input").attr("size", 5);
    var btnBrowse = Button.create({caption: "Open..."})
        .attr("title", "Ouvrir le répertoire contenant les images.");
    btnBrowse.Tap(
        function() {
            require("child_process").spawn("nemo", [that._directory]);
        }
    );
    var btnRefresh = Button.create({caption: "Update"}).addClass("green")
        .attr("title", "Rechercher toutes les images du répertoire est les ajouter à l'animation.");
    btnRefresh.Tap(
        function() {
            that.update();
        }
    );
    div.append(inpTime, btnBrowse, btnRefresh);
    inpTime = inpTime.element();
    inpTime.value = data.time;
    inpTime.addEventListener(
        "keyup",
        function() {
            data.time = parseInt(inpTime.value);
            that.save();
        }
    );
    right.append(div);

    this._images = [];
    data.frames.forEach(
        function(frame, idx) {
            that.addFrame(right, frame, idx);
            var img = new window.Image();
            img.src = Path.join(that._directory, frame.src);
            that._images.push(img);
        }
    );
    this._data = data;

    this.draw();
};

/**
 * Rechercher toutes les images du répertoire est les ajouter à l'animation.
 */
AnimEdit.prototype.update = function() {
    var pngFiles = Util.listFiles(this._directory, ".png");
    var frames = this._data.frames;
    pngFiles.forEach(
        function(file) {
            var filename = Path.basename(file);
            if (filename.charAt(0) == '_') return;
            var found = false;
            for (var i = 0 ; i < frames.length ; i++) {
                var frame = frames[i];
                if (frame.src == filename) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                frames.push({src: filename, x: 16, y: 16});
            }
        },
        this
    );
    this.save();
    this.refresh();
};


/**
 * @return void
 */
AnimEdit.prototype.addFrame = function(parent, frame, index) {
    var that = this;
    var div = Widget.div();
    parent.append(div);
    var img = Widget.div("img").addClass("vignette")
        .attr("src", Path.join(this._directory, frame.src));
    img.Tap(
        function() {
            if (img === that._fixedImage) {
                that._fixedFrameIndex = -1;
                that._fixedImage = null;
                img.removeClass("selected");
            } else {
                if (that._fixedImage) {
                    that._fixedImage.removeClass("selected");
                }
                that._fixedImage = img;
                img.addClass("selected");
                that._frameIndex = index;
                that._fixedFrameIndex = index;
            }
        }
    );
    div.append(img);
    var inpX = Widget.div("input")
        .attr({type: "text", size: "3"});
    var inpY = Widget.div("input")
        .attr({type: "text", size: "3"});
    div.append(Widget.div("br"), inpX, inpY, Widget.div("br"));
    inpX = inpX.element();
    inpY = inpY.element();
    inpX.value = frame.x;
    inpY.value = frame.y;
    inpX.addEventListener(
        "keyup",
        function() {
            frame.x = parseInt(inpX.value);
            that.save();
        }
    );
    inpY.addEventListener(
        "keyup",
        function() {
            frame.y = parseInt(inpY.value);
            that.save();
        }
    );

    var i, j, e = img.element(), row, 
    tbl = Widget.div().addClass("box");
    for (j = 0 ; j < 1.5 ; j += .5) {
        row = Widget.div();
        tbl.append(row);
        for (i = 0 ; i < 1.5 ; i += .5) {
            this.addPos(row, frame, i, j, e, inpX, inpX);
        }
    }
    div.append(tbl);
};

/**
 * @return void
 */
AnimEdit.prototype.addPos = function(div, frame, i, j, img, inpX, inpY) {
    var that = this;
    var box = Widget.div().addClass("box-pos")
        .Tap(
            function() {
                frame.x = Math.floor(img.width * i + .5);
                frame.y = Math.floor(img.height * j + .5);
                that.save();
                that.refresh();
            }
        );
    div.append(box);
};

/**
 * @return void
 */
AnimEdit.prototype.save = function() {
    FS.writeFileSync(this._filename, JSON.stringify(this._data));
};

/**
 * @return void
 */
AnimEdit.prototype.drawBackground = function() {
    var ctx = this._ctx;
    ctx.fillStyle = "#ddd";
    ctx.fillRect(0, 0, W, H);
    var i, j, size = 12;
    for (j = 0 ; j < H / size ; j++) {
        for (i = 0 ; i < W / size ; i++) {
            if ((i + j) & 1) continue;
            var x = i * size;
            var y = j * size;
            ctx.fillStyle = "#ccc";
            ctx.fillRect(x, y, size, size);
        }
    }
};

/**
 * @return void
 */
AnimEdit.prototype.draw = function(time) {
    var that = this;
    if (typeof time === 'undefined') time = 0;
    if (time > 0) {
        var ctx = this._ctx;
        var data = this._data;
        var idx = Math.floor((time % data.time) * data.frames.length / data.time);
        if (this._fixedFrameIndex > 0) {
            idx = this._fixedFrameIndex;
        }
        if (idx != this._frameIndex) {
            var frame = data.frames[idx];
            var x = Math.floor(W / 2) + .5;
            var y = .5 + H - 24;
            this.drawBackground();
            ctx.strokeStyle = "#333";
            ctx.beginPath();
            ctx.moveTo(x, 0);
            ctx.lineTo(x, H);
            ctx.stroke();
            ctx.fillStyle = "rgba(0,0,0,.3)";
            ctx.beginPath();
            ctx.rect(0, y, W, 24);
            ctx.fill();
            ctx.drawImage(this._images[idx], x - frame.x, y - frame.y - 1);
            if (this._fixedFrameIndex < 0) {
                this._frameIndex = idx;
            } else {
                this._frameIndex = this._fixedFrameIndex;
            }
        }
    }
    window.requestAnimationFrame(
        function(t) {
            that.draw(t);
        }
    );
};



AnimEdit.create = function(filename) {
    console.log("new AnimEdit(" + filename + ")");
    return new AnimEdit(filename);
};
module.exports = AnimEdit;